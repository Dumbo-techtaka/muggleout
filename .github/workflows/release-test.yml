name: Release Branch Test

on:
  push:
    branches:
      - release/*
      - release-*
  pull_request:
    branches:
      - release/*
      - release-*

jobs:
  # 배포 시뮬레이션 테스트
  release-simulation:
    name: Release Simulation - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm pack
      
      - name: Test package info
        run: |
          echo "📦 Package Info:"
          npm pack --dry-run
          ls -la *.tgz || dir *.tgz
        shell: bash
      
      - name: Verify package contents
        run: |
          mkdir test-extract
          tar -xzf *.tgz -C test-extract
          echo "📋 Package contents:"
          find test-extract -type f -name "*.js" | head -20 || echo "No JS files found"
        shell: bash
        if: runner.os != 'Windows'
      
      - name: Test local install
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../*.tgz
          npx muggleout --version
        shell: bash

  # 실제 사용 시나리오 테스트
  real-world-test:
    name: Real World Test - ${{ matrix.scenario }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            scenario: "터미널 꾸미기"
            commands: |
              echo "🎨 터미널 꾸미기 시나리오 테스트"
              muggleout --version
              muggleout --help | head -20
              
          - os: macos-latest
            scenario: "AI 도구 설치"
            commands: |
              echo "🤖 AI 도구 정보 확인"
              muggleout --version
              echo "AI tools test completed"
              
          - os: ubuntu-latest
            scenario: "시스템 진단"
            commands: |
              echo "🏥 시스템 진단 테스트"
              muggleout --version
              echo "System diagnosis test completed"
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Setup test environment
        run: |
          npm ci
          npm link
        env:
          CI: true
          MUGGLEOUT_TEST: true
      
      - name: "Run scenario: ${{ matrix.scenario }}"
        env:
          CI: true
          MUGGLEOUT_TEST: true
        shell: bash
        run: |
          echo "Starting scenario: ${{ matrix.scenario }}"
          ${{ matrix.commands }}
      
      - name: Cleanup
        if: always()
        run: npm unlink

  # 의존성 호환성 테스트
  dependency-test:
    name: Dependency Compatibility
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Check for outdated dependencies
        run: |
          npm outdated || true
          echo ""
          echo "📊 Dependency audit:"
          npm audit || true
      
      - name: Test with latest dependencies
        run: |
          # 최신 버전으로 업데이트 시도 (실제로 저장하지는 않음)
          npm update --dry-run
      
      - name: Check peer dependencies
        run: |
          echo "🔍 Checking peer dependencies..."
          npm ls || true

  # 번들 크기 체크
  bundle-size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install and build
        run: |
          npm ci
          npm pack
      
      - name: Check package size
        run: |
          echo "📦 Package size analysis:"
          ls -lh *.tgz
          
          # 크기 확인 (10MB 이상이면 경고)
          SIZE=$(stat -f%z *.tgz 2>/dev/null || stat -c%s *.tgz)
          SIZE_MB=$((SIZE / 1024 / 1024))
          
          echo "Package size: ${SIZE_MB}MB"
          
          if [ $SIZE_MB -gt 10 ]; then
            echo "⚠️  Warning: Package size is over 10MB!"
          else
            echo "✅ Package size is reasonable"
          fi
      
      - name: Analyze included files
        run: |
          tar -tzf *.tgz | head -50
          echo "..."
          echo "Total files: $(tar -tzf *.tgz | wc -l)"

  # 성능 테스트
  performance-test:
    name: Performance Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Install
        run: |
          npm ci
          npm link
        env:
          CI: true
          MUGGLEOUT_TEST: true
      
      - name: Measure startup time
        env:
          CI: true
          MUGGLEOUT_TEST: true
        shell: bash
        run: |
          echo "⏱️  Measuring startup performance..."
          
          # 간단히 몇 번 실행하여 확인
          for i in {1..3}; do
            echo "Run $i:"
            muggleout --version
          done
      
      - name: Memory usage check
        run: |
          echo "💾 Checking memory usage..."
          muggleout --version &
          PID=$!
          sleep 1
          ps aux | grep $PID | grep -v grep || echo "Process completed too quickly to measure"
        if: runner.os == 'Linux'

  # 최종 승인 체크
  release-approval:
    name: Release Approval Check
    runs-on: ubuntu-latest
    needs: [release-simulation, real-world-test, dependency-test, bundle-size-check, performance-test]
    
    steps:
      - name: Summary
        run: |
          echo "## 🚀 Release 브랜치 테스트 완료!"
          echo ""
          echo "### ✅ 모든 플랫폼 테스트 통과"
          echo "- macOS ✓"
          echo "- Ubuntu ✓"
          echo "- Windows ✓"
          echo ""
          echo "### 📋 테스트 항목"
          echo "- 패키지 빌드 ✓"
          echo "- 설치 시뮬레이션 ✓"
          echo "- 실사용 시나리오 ✓"
          echo "- 의존성 호환성 ✓"
          echo "- 번들 크기 ✓"
          echo "- 성능 측정 ✓"
          echo ""
          echo "### 🎯 다음 단계"
          echo "1. CHANGELOG.md 확인"
          echo "2. 버전 번호 확인"
          echo "3. main 브랜치로 PR 생성"